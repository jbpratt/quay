name: Surge PR Previews

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'web/**'

jobs:
  deploy-preview:
    name: Deploy PR Preview to Surge
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: write
      contents: read
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: 'web/package-lock.json'

    - name: Install dependencies
      run: cd web && npm install

    - name: Build with mocked API
      run: cd web && npm run build
      env:
        MOCK_API: 'true'

    - name: Setup Surge for SPA routing
      run: |
        cd web/dist
        cp index.html 200.html

    - name: Install Surge
      run: npm install -g surge

    - name: Deploy to Surge
      id: deploy
      run: |
        DEPLOY_DOMAIN="quay-pr-${{ github.event.pull_request.number }}.surge.sh"
        cd web/dist
        surge . $DEPLOY_DOMAIN --token ${{ secrets.SURGE_TOKEN }}
        echo "url=https://$DEPLOY_DOMAIN" >> $GITHUB_OUTPUT
      env:
        SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

    - name: Comment PR with deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentUrl = '${{ steps.deploy.outputs.url }}';
          const prNumber = context.payload.pull_request.number;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Surge Preview Deployment')
          );

          const commentBody = `## Surge Preview Deployment

          âœ… **Preview deployed successfully!**

          ðŸ”— **Preview URL:** ${deploymentUrl}

          Built with \`MOCK_API=true\` from commit ${{ github.event.pull_request.head.sha }}

          _This preview will be updated on every push to this PR._`;

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
          }
